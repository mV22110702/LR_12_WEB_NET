using System;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional

namespace LR_12_WEB_NET.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterDatabase()
                .Annotation("MySql:CharSet", "utf8mb4");

            migrationBuilder.CreateTable(
                name: "user_roles",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn),
                    Name = table.Column<string>(type: "longtext", nullable: false)
                        .Annotation("MySql:CharSet", "utf8mb4")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_user_roles", x => x.Id);
                })
                .Annotation("MySql:CharSet", "utf8mb4");

            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn),
                    FirstName = table.Column<string>(type: "varchar(15)", maxLength: 15, nullable: false)
                        .Annotation("MySql:CharSet", "utf8mb4"),
                    LastName = table.Column<string>(type: "varchar(15)", maxLength: 15, nullable: false)
                        .Annotation("MySql:CharSet", "utf8mb4"),
                    Email = table.Column<string>(type: "longtext", nullable: false)
                        .Annotation("MySql:CharSet", "utf8mb4"),
                    RoleId = table.Column<int>(type: "int", nullable: false),
                    BirthDate = table.Column<DateTime>(type: "datetime(6)", nullable: false),
                    PasswordHash = table.Column<byte[]>(type: "longblob", nullable: false),
                    PasswordSalt = table.Column<byte[]>(type: "longblob", nullable: false),
                    LastLogin = table.Column<DateTime>(type: "datetime(6)", nullable: false),
                    InvalidLoginAttempts = table.Column<int>(type: "int", nullable: false),
                    IsLocked = table.Column<bool>(type: "tinyint(1)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Users_user_roles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "user_roles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                })
                .Annotation("MySql:CharSet", "utf8mb4");

            migrationBuilder.InsertData(
                table: "user_roles",
                columns: new[] { "Id", "Name" },
                values: new object[,]
                {
                    { 1, "Admin" },
                    { 2, "User" }
                });

            migrationBuilder.InsertData(
                table: "Users",
                columns: new[] { "Id", "BirthDate", "Email", "FirstName", "InvalidLoginAttempts", "IsLocked", "LastLogin", "LastName", "PasswordHash", "PasswordSalt", "RoleId" },
                values: new object[,]
                {
                    { 1, new DateTime(2004, 2, 28, 16, 51, 25, 744, DateTimeKind.Local).AddTicks(942), "email1@mail.com", "FirstName1", 0, false, new DateTime(2024, 2, 27, 16, 51, 25, 744, DateTimeKind.Local).AddTicks(1011), "LastName1", new byte[] { 239, 123, 197, 65, 225, 213, 206, 199, 175, 242, 46, 122, 215, 223, 189, 211, 21, 172, 201, 218, 172, 71, 174, 179, 254, 241, 141, 227, 194, 111, 148, 114, 79, 52, 31, 32, 232, 186, 82, 111, 56, 248, 82, 24, 15, 76, 54, 137, 220, 236, 30, 153, 208, 110, 245, 16, 195, 71, 181, 60, 212, 67, 145, 2 }, new byte[] { 176, 215, 58, 104, 71, 168, 28, 41, 210, 207, 31, 50, 218, 138, 16, 97, 161, 185, 86, 12, 183, 231, 167, 118, 216, 212, 135, 101, 46, 255, 15, 167, 203, 28, 77, 233, 225, 240, 168, 231, 131, 234, 223, 82, 57, 31, 50, 249, 76, 11, 135, 63, 130, 146, 139, 184, 78, 0, 111, 228, 27, 227, 23, 202, 175, 26, 37, 236, 200, 244, 45, 155, 40, 137, 90, 194, 36, 28, 23, 197, 25, 182, 0, 24, 123, 17, 75, 39, 215, 35, 113, 26, 129, 124, 35, 141, 53, 193, 116, 187, 130, 3, 161, 107, 77, 242, 118, 210, 60, 47, 187, 79, 5, 11, 122, 48, 219, 73, 148, 223, 194, 178, 216, 190, 28, 54, 70, 160 }, 2 },
                    { 2, new DateTime(2004, 2, 29, 16, 51, 25, 744, DateTimeKind.Local).AddTicks(1424), "email2@mail.com", "FirstName2", 0, false, new DateTime(2024, 2, 27, 16, 51, 25, 744, DateTimeKind.Local).AddTicks(1429), "LastName2", new byte[] { 88, 157, 27, 44, 49, 152, 152, 118, 70, 31, 141, 124, 237, 148, 72, 184, 217, 18, 247, 27, 185, 43, 101, 189, 6, 184, 202, 80, 21, 210, 214, 180, 92, 192, 132, 189, 20, 153, 245, 144, 229, 227, 195, 21, 67, 74, 215, 81, 36, 67, 23, 52, 107, 7, 219, 164, 143, 8, 87, 89, 210, 161, 75, 190 }, new byte[] { 207, 9, 157, 193, 116, 45, 43, 106, 146, 88, 69, 207, 185, 226, 166, 121, 10, 218, 141, 78, 74, 210, 233, 247, 112, 157, 152, 168, 24, 31, 2, 189, 159, 85, 94, 126, 11, 22, 11, 138, 148, 26, 74, 75, 87, 68, 58, 185, 216, 106, 236, 156, 188, 10, 80, 146, 12, 29, 179, 52, 42, 92, 162, 90, 57, 105, 57, 186, 15, 202, 71, 103, 139, 198, 82, 221, 100, 75, 85, 90, 57, 44, 97, 1, 243, 232, 149, 172, 39, 30, 79, 232, 5, 213, 236, 245, 188, 47, 143, 82, 160, 208, 196, 222, 41, 158, 61, 55, 227, 246, 224, 246, 94, 85, 231, 218, 35, 23, 131, 93, 164, 10, 110, 29, 197, 167, 18, 39 }, 1 },
                    { 3, new DateTime(2004, 3, 1, 16, 51, 25, 744, DateTimeKind.Local).AddTicks(1497), "email3@mail.com", "FirstName3", 0, false, new DateTime(2024, 2, 27, 16, 51, 25, 744, DateTimeKind.Local).AddTicks(1500), "LastName3", new byte[] { 169, 229, 245, 58, 112, 21, 237, 108, 224, 71, 48, 157, 46, 20, 126, 151, 61, 128, 179, 21, 112, 133, 158, 31, 145, 190, 79, 113, 216, 131, 25, 204, 163, 121, 146, 238, 225, 156, 207, 125, 110, 172, 232, 71, 208, 10, 208, 230, 56, 191, 55, 134, 165, 159, 118, 157, 255, 108, 29, 154, 211, 95, 34, 24 }, new byte[] { 233, 47, 58, 88, 57, 224, 69, 78, 180, 24, 45, 171, 106, 181, 178, 240, 19, 220, 133, 247, 152, 5, 35, 58, 178, 138, 138, 190, 67, 174, 150, 100, 119, 122, 86, 56, 164, 231, 233, 166, 193, 48, 88, 65, 113, 166, 36, 228, 237, 100, 246, 89, 141, 61, 211, 8, 73, 248, 213, 37, 218, 225, 30, 99, 135, 160, 58, 144, 126, 34, 56, 106, 151, 74, 135, 147, 81, 154, 182, 24, 113, 236, 95, 50, 197, 187, 190, 42, 184, 191, 102, 233, 57, 55, 112, 219, 220, 155, 255, 251, 218, 171, 234, 52, 112, 135, 224, 81, 218, 114, 164, 33, 36, 47, 87, 63, 110, 57, 220, 218, 184, 136, 43, 146, 58, 27, 166, 35 }, 2 },
                    { 4, new DateTime(2004, 3, 2, 16, 51, 25, 744, DateTimeKind.Local).AddTicks(1601), "email4@mail.com", "FirstName4", 0, false, new DateTime(2024, 2, 27, 16, 51, 25, 744, DateTimeKind.Local).AddTicks(1627), "LastName4", new byte[] { 167, 95, 49, 172, 255, 181, 143, 43, 240, 1, 88, 79, 2, 37, 44, 49, 164, 201, 191, 191, 34, 43, 120, 22, 7, 37, 147, 107, 98, 120, 125, 175, 189, 60, 87, 0, 162, 128, 73, 249, 51, 215, 172, 3, 211, 234, 152, 138, 110, 26, 14, 121, 90, 246, 64, 103, 133, 94, 70, 10, 220, 17, 235, 246 }, new byte[] { 82, 23, 166, 116, 79, 8, 115, 129, 166, 97, 250, 215, 19, 170, 75, 26, 119, 117, 62, 184, 239, 36, 168, 105, 109, 106, 79, 199, 93, 2, 79, 113, 32, 55, 118, 7, 169, 117, 130, 249, 227, 249, 233, 201, 102, 81, 19, 221, 220, 118, 252, 30, 39, 214, 123, 116, 215, 88, 11, 232, 89, 194, 122, 174, 227, 117, 236, 210, 25, 9, 170, 179, 162, 79, 165, 176, 148, 248, 200, 238, 160, 211, 128, 111, 212, 161, 112, 243, 192, 129, 52, 84, 8, 22, 58, 23, 196, 70, 83, 96, 41, 84, 53, 115, 228, 144, 234, 180, 235, 4, 252, 59, 249, 100, 128, 225, 148, 24, 117, 189, 145, 144, 77, 207, 51, 83, 15, 88 }, 1 },
                    { 5, new DateTime(2004, 3, 3, 16, 51, 25, 744, DateTimeKind.Local).AddTicks(1692), "email5@mail.com", "FirstName5", 0, false, new DateTime(2024, 2, 27, 16, 51, 25, 744, DateTimeKind.Local).AddTicks(1701), "LastName5", new byte[] { 222, 19, 145, 21, 103, 220, 16, 107, 134, 123, 34, 205, 53, 26, 232, 189, 230, 160, 197, 241, 241, 193, 125, 16, 192, 151, 29, 187, 12, 189, 107, 228, 182, 172, 43, 192, 75, 189, 197, 142, 75, 21, 11, 108, 35, 64, 228, 144, 15, 133, 249, 45, 0, 244, 41, 5, 33, 166, 25, 190, 102, 255, 33, 231 }, new byte[] { 191, 199, 223, 57, 38, 191, 29, 251, 85, 3, 232, 122, 184, 207, 242, 75, 52, 0, 15, 138, 176, 250, 15, 19, 193, 54, 168, 106, 160, 115, 110, 34, 223, 180, 59, 230, 3, 101, 196, 139, 207, 119, 146, 143, 163, 169, 81, 75, 96, 251, 247, 101, 253, 51, 134, 191, 246, 160, 155, 136, 239, 139, 116, 27, 158, 86, 50, 216, 204, 251, 204, 181, 230, 90, 101, 88, 85, 239, 160, 91, 38, 86, 112, 192, 59, 42, 135, 69, 151, 132, 211, 223, 27, 136, 85, 229, 205, 200, 116, 108, 32, 140, 225, 174, 67, 195, 210, 18, 9, 58, 79, 131, 238, 134, 17, 133, 206, 86, 121, 197, 184, 58, 149, 133, 218, 20, 233, 83 }, 2 },
                    { 6, new DateTime(2004, 3, 4, 16, 51, 25, 744, DateTimeKind.Local).AddTicks(1764), "email6@mail.com", "FirstName6", 0, false, new DateTime(2024, 2, 27, 16, 51, 25, 744, DateTimeKind.Local).AddTicks(1768), "LastName6", new byte[] { 121, 3, 98, 140, 192, 160, 26, 86, 76, 211, 227, 204, 92, 45, 36, 233, 227, 8, 4, 106, 33, 159, 8, 131, 199, 57, 85, 139, 134, 245, 145, 10, 123, 110, 107, 151, 218, 226, 131, 253, 63, 4, 116, 125, 46, 206, 70, 126, 220, 191, 202, 1, 149, 151, 3, 172, 131, 86, 194, 136, 197, 196, 166, 148 }, new byte[] { 20, 118, 237, 107, 235, 22, 121, 200, 247, 160, 171, 234, 251, 102, 126, 247, 238, 176, 43, 60, 255, 192, 14, 193, 112, 229, 13, 116, 64, 247, 3, 106, 39, 217, 86, 44, 217, 39, 89, 50, 80, 207, 222, 190, 109, 237, 116, 112, 187, 67, 92, 75, 210, 181, 143, 79, 140, 2, 182, 85, 33, 25, 223, 163, 216, 254, 206, 0, 167, 71, 193, 188, 101, 126, 89, 203, 208, 247, 206, 184, 196, 26, 237, 4, 251, 190, 139, 69, 136, 158, 204, 78, 159, 224, 203, 170, 68, 76, 224, 124, 167, 143, 108, 228, 159, 165, 124, 236, 31, 38, 12, 157, 176, 240, 159, 83, 249, 202, 99, 75, 224, 131, 3, 24, 77, 155, 195, 50 }, 1 },
                    { 7, new DateTime(2004, 3, 5, 16, 51, 25, 744, DateTimeKind.Local).AddTicks(1821), "email7@mail.com", "FirstName7", 0, false, new DateTime(2024, 2, 27, 16, 51, 25, 744, DateTimeKind.Local).AddTicks(1824), "LastName7", new byte[] { 23, 36, 23, 241, 98, 180, 77, 22, 209, 94, 200, 2, 41, 163, 213, 24, 209, 104, 229, 39, 150, 243, 80, 66, 136, 137, 240, 242, 167, 228, 210, 13, 165, 94, 119, 119, 145, 191, 197, 117, 21, 90, 15, 56, 176, 53, 9, 240, 52, 39, 242, 59, 5, 242, 105, 49, 215, 125, 146, 230, 102, 250, 197, 17 }, new byte[] { 189, 0, 151, 163, 180, 67, 248, 198, 106, 141, 219, 91, 198, 156, 170, 62, 244, 104, 226, 14, 34, 228, 174, 184, 167, 223, 100, 47, 249, 254, 114, 174, 169, 141, 103, 50, 80, 43, 175, 24, 190, 234, 190, 206, 253, 138, 236, 109, 209, 232, 172, 160, 127, 1, 181, 211, 162, 58, 94, 2, 175, 118, 102, 69, 52, 202, 109, 238, 98, 35, 164, 49, 8, 184, 63, 175, 121, 239, 148, 94, 61, 242, 104, 203, 98, 118, 209, 250, 136, 86, 27, 13, 42, 142, 199, 66, 165, 164, 49, 52, 138, 250, 245, 218, 20, 73, 93, 54, 235, 107, 173, 41, 125, 107, 167, 93, 6, 1, 75, 18, 236, 90, 6, 152, 83, 238, 110, 15 }, 2 },
                    { 8, new DateTime(2004, 3, 6, 16, 51, 25, 744, DateTimeKind.Local).AddTicks(1882), "email8@mail.com", "FirstName8", 0, false, new DateTime(2024, 2, 27, 16, 51, 25, 744, DateTimeKind.Local).AddTicks(1885), "LastName8", new byte[] { 2, 177, 118, 184, 158, 40, 157, 181, 73, 229, 21, 208, 63, 213, 200, 237, 184, 166, 47, 28, 94, 75, 99, 176, 233, 115, 90, 197, 67, 186, 167, 200, 66, 241, 145, 97, 227, 44, 248, 102, 216, 115, 42, 110, 181, 33, 43, 5, 92, 155, 244, 121, 180, 200, 35, 10, 60, 171, 110, 100, 184, 1, 242, 183 }, new byte[] { 121, 136, 113, 18, 143, 131, 53, 60, 89, 161, 93, 0, 91, 11, 37, 245, 156, 166, 18, 213, 163, 29, 23, 171, 232, 128, 134, 171, 174, 121, 192, 210, 29, 112, 143, 184, 131, 198, 83, 45, 174, 60, 17, 229, 147, 3, 179, 161, 133, 53, 240, 151, 46, 191, 220, 108, 172, 124, 140, 255, 23, 5, 185, 223, 225, 51, 70, 12, 144, 254, 32, 88, 2, 96, 137, 24, 248, 243, 110, 223, 192, 123, 76, 46, 243, 70, 221, 137, 15, 176, 154, 197, 73, 59, 251, 52, 174, 225, 36, 103, 177, 135, 144, 228, 170, 122, 44, 89, 206, 78, 247, 209, 136, 54, 206, 117, 80, 79, 171, 209, 240, 235, 249, 136, 132, 168, 176, 104 }, 1 },
                    { 9, new DateTime(2004, 3, 7, 16, 51, 25, 744, DateTimeKind.Local).AddTicks(1970), "email9@mail.com", "FirstName9", 0, false, new DateTime(2024, 2, 27, 16, 51, 25, 744, DateTimeKind.Local).AddTicks(1974), "LastName9", new byte[] { 229, 75, 122, 226, 97, 175, 173, 92, 234, 194, 7, 72, 225, 146, 85, 248, 218, 76, 8, 164, 198, 36, 151, 240, 216, 114, 192, 113, 132, 138, 49, 182, 174, 18, 10, 48, 72, 145, 211, 44, 78, 54, 140, 164, 215, 163, 250, 216, 87, 182, 151, 73, 160, 238, 115, 227, 39, 188, 185, 217, 253, 220, 48, 42 }, new byte[] { 96, 101, 36, 231, 21, 169, 52, 231, 70, 135, 135, 247, 102, 208, 82, 203, 169, 214, 60, 177, 102, 194, 82, 59, 133, 137, 49, 216, 54, 74, 41, 126, 14, 198, 98, 69, 236, 164, 33, 184, 171, 111, 234, 190, 160, 119, 236, 126, 59, 6, 212, 81, 31, 156, 131, 12, 163, 98, 86, 42, 30, 233, 102, 188, 162, 202, 13, 35, 218, 192, 243, 79, 232, 187, 170, 104, 170, 181, 238, 36, 171, 37, 190, 177, 142, 193, 30, 94, 26, 49, 71, 209, 230, 242, 199, 231, 24, 217, 151, 173, 124, 230, 169, 53, 58, 93, 71, 53, 28, 226, 70, 32, 138, 190, 134, 96, 101, 250, 222, 20, 236, 227, 76, 144, 226, 203, 235, 215 }, 2 },
                    { 10, new DateTime(2004, 3, 8, 16, 51, 25, 744, DateTimeKind.Local).AddTicks(2031), "email10@mail.com", "FirstName10", 0, false, new DateTime(2024, 2, 27, 16, 51, 25, 744, DateTimeKind.Local).AddTicks(2035), "LastName10", new byte[] { 234, 143, 153, 136, 209, 21, 35, 83, 148, 173, 57, 212, 51, 104, 109, 88, 236, 14, 250, 215, 85, 18, 101, 55, 132, 58, 11, 105, 16, 201, 247, 192, 106, 197, 252, 3, 174, 27, 70, 44, 36, 45, 229, 30, 214, 61, 237, 20, 36, 40, 171, 21, 159, 51, 33, 137, 69, 84, 194, 45, 245, 224, 252, 154 }, new byte[] { 86, 201, 79, 247, 154, 11, 169, 41, 188, 1, 196, 71, 105, 158, 231, 144, 117, 25, 112, 78, 176, 146, 52, 34, 6, 237, 168, 246, 97, 116, 97, 240, 53, 184, 167, 190, 222, 89, 97, 19, 24, 121, 177, 106, 219, 20, 95, 163, 142, 230, 72, 158, 30, 68, 190, 135, 141, 208, 3, 246, 68, 118, 39, 4, 18, 207, 177, 216, 156, 167, 220, 82, 153, 181, 56, 113, 7, 238, 101, 199, 117, 233, 245, 181, 136, 246, 194, 211, 32, 102, 22, 115, 60, 163, 218, 18, 54, 110, 43, 7, 20, 5, 92, 64, 152, 98, 64, 10, 125, 227, 203, 198, 37, 12, 207, 55, 132, 12, 174, 170, 142, 117, 247, 79, 106, 108, 241, 10 }, 1 }
                });

            migrationBuilder.CreateIndex(
                name: "IX_Users_RoleId",
                table: "Users",
                column: "RoleId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Users");

            migrationBuilder.DropTable(
                name: "user_roles");
        }
    }
}
